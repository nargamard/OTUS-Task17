- name: client
  hosts: client
  become: yes
  tasks:

# Установим borgbackup
  - name: install borgbackup
    apt:
      name: 
        - borgbackup
      state: present
      update_cache: yes

# Создадим ключи ssh
  - name: Make ssh-keys
    community.crypto.openssh_keypair:
      path: /root/.ssh/id_rsa


  - block:
    - name: Fetch public key data from client_host
      command: cat /root/.ssh/id_rsa.pub
      register: public_key_data

    - name: Print the gateway for each host when defined
      debug:
        msg: Key on {{ inventory_hostname }} is {{ public_key_data.stdout }}

    - name: "Add public key from client_host"
      shell: echo {{ public_key_data.stdout }} > /home/borg/.ssh/authorized_keys
      delegate_to: backup 

# Зададим права на файл '/home/borg/.ssh/authorized_keys'
    - name: CHmod file '/home/borg/.ssh/authorized_keys'
      file:
        path: /home/borg/.ssh/authorized_keys
        owner: borg
        group: borg
        mode: '0600'
      delegate_to: backup 

# Скопируем файл юнита 'borg-backup' на сервер
  - name: Copy unit borg-backup
    copy:
      src: ./files/borg-backup.service
      dest: /etc/systemd/system/borg-backup.service

# Скопируем файл таймера на сервер
  - name: Copy timer
    copy:
      src: ./files/borg-backup.timer
      dest: /etc/systemd/system/borg-backup.timer

# Перечитаем демоны
  - name: reload daemons
    systemd_service:
      daemon_reload: true

# # Инициализируем репозиторий borg на backup сервере с client сервера
#   - name: Init borg
#     shell: ssh-keyscan -H 192.168.56.10 >> ~/.ssh/known_hosts && ( echo "Otus1234\n"; echo "Otus1234\n"; echo "n" ) | borg  init  --encryption=repokey borg@192.168.56.10:/var/backup/

# # Запустим и включим сервисы
#   - name: start borg-backup.service and borg-backup.timer
#     systemd_service:
#       name: 
#         - borg-backup.service
#         - borg-backup.timer
#       state: started
#       enabled: true

